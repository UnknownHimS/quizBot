[
  {
    "question": "Which function is used to print output to the screen in C?",
    "options": ["print()", "printf()", "cout", "echo"],
    "answer": 1,
    "explanation": "`printf()` is the standard function used in C to print output to the console."
  },
  {
    "question": "Which header file is required for printf and scanf?",
    "options": ["math.h", "string.h", "stdio.h", "stdlib.h"],
    "answer": 2,
    "explanation": "`stdio.h` contains the declarations for `printf()` and `scanf()`."
  },
  {
    "question": "What is the correct format specifier for printing an integer using printf?",
    "options": ["%c", "%d", "%f", "%s"],
    "answer": 1,
    "explanation": "`%d` is the format specifier for integers."
  },
  {
    "question": "Which function is used to take input from the user in C?",
    "options": ["input()", "scanf()", "cin", "read()"],
    "answer": 1,
    "explanation": "`scanf()` is used to read input from the user in C."
  },
  {
    "question": "What will `printf(\"%d\", 5+2);` output?",
    "options": ["7", "5", "2", "52"],
    "answer": 0,
    "explanation": "`5 + 2` evaluates to 7, and `%d` prints an integer."
  },
  {
    "question": "How do you declare an integer variable in C?",
    "options": ["int x;", "integer x;", "x = int;", "x int;"],
    "answer": 0,
    "explanation": "The correct syntax for declaring an integer variable is `int x;`."
  },
  {
    "question": "Which of these is the correct way to initialize an integer variable?",
    "options": ["int x = 10;", "int x == 10;", "int x := 10;", "int = x 10;"],
    "answer": 0,
    "explanation": "`int x = 10;` is the proper way to initialize an integer variable."
  },
  {
    "question": "Which format specifier is used for reading a float using scanf?",
    "options": ["%d", "%f", "%c", "%s"],
    "answer": 1,
    "explanation": "`%f` is used to read float values."
  },
  {
    "question": "What will be the output of: `printf(\"%c\", 'A');`?",
    "options": ["A", "65", "Error", "'A'"],
    "answer": 0,
    "explanation": "`%c` prints a character; 'A' is printed."
  },
  {
    "question": "Which of these can be used in an if condition?",
    "options": ["if(x == 5)", "if x = 5", "if x := 5", "if x equal 5"],
    "answer": 0,
    "explanation": "The correct syntax is `if(x == 5)`."
  },
  {
    "question": "Which of these is a correct if-else syntax?",
    "options": [
      "if(x > 0) then x++; else x--;",
      "if(x > 0) { x++; } else { x--; }",
      "if x > 0: x++; else: x--;",
      "if x > 0 x++; else x--;"
    ],
    "answer": 1,
    "explanation": "C uses braces `{}` for block structures in if-else statements."
  },
  {
    "question": "Which operator is used for 'equal to' in an if condition?",
    "options": ["=", "==", "===", ":="],
    "answer": 1,
    "explanation": "`==` is used for comparison in C."
  },
  {
    "question": "What is the output of `if(0) printf(\"Hello\");`?",
    "options": ["Hello", "0", "Error", "Nothing"],
    "answer": 3,
    "explanation": "`if(0)` evaluates to false, so the block is skipped."
  },
  {
    "question": "Which keyword is used to write a switch statement?",
    "options": ["select", "switch", "case", "default"],
    "answer": 1,
    "explanation": "`switch` is the keyword for a multi-way branching statement."
  },
  {
    "question": "What is the purpose of the `default` case in a switch statement?",
    "options": ["To exit the loop", "To match the first case", "To execute when no other case matches", "To reset values"],
    "answer": 2,
    "explanation": "`default` is executed when none of the `case` labels match the switch expression."
  },
  {
    "question": "Which of the following is a valid switch statement syntax?",
    "options": [
      "switch x { case 1: break; }",
      "switch(x) { case 1: break; }",
      "select(x) { case 1: break; }",
      "switch(x): case 1: break;"
    ],
    "answer": 1,
    "explanation": "The proper syntax is `switch(x) { ... }`."
  },
  {
    "question": "What is required at the end of each `case` in a switch?",
    "options": ["continue;", "stop;", "break;", "exit;"],
    "answer": 2,
    "explanation": "`break;` prevents fall-through to the next case."
  },
  {
    "question": "Which of these declares a float variable?",
    "options": ["float x;", "decimal x;", "real x;", "float = x;"],
    "answer": 0,
    "explanation": "`float x;` correctly declares a float variable."
  },
  {
    "question": "What does `scanf(\"%d\", &x);` do?",
    "options": [
      "Reads a float into x",
      "Reads an integer into x",
      "Prints the value of x",
      "Increments x by 1"
    ],
    "answer": 1,
    "explanation": "`scanf(\"%d\", &x);` reads an integer value into variable `x`."
  },
  {
    "question": "What does `&x` mean in `scanf`?",
    "options": ["Value of x", "Address of x", "Type of x", "Size of x"],
    "answer": 1,
    "explanation": "`&x` gives the memory address of `x`, required by `scanf()`."
  },
  {
    "question": "Which of these is a correct character declaration?",
    "options": ["char c = 'A';", "char c = \"A\";", "character c = A;", "char = 'A';"],
    "answer": 0,
    "explanation": "Characters in C are declared with single quotes and the `char` type."
  },
  {
    "question": "What does the following print? `printf(\"%d\", sizeof(int));`",
    "options": ["4", "2", "Depends on compiler", "Undefined"],
    "answer": 2,
    "explanation": "`sizeof(int)` depends on the compiler and system architecture."
  },
  {
    "question": "Which of the following is used to comment a single line in C?",
    "options": ["// comment", "/* comment */", "# comment", "-- comment"],
    "answer": 0,
    "explanation": "`//` is used for single-line comments in C."
  },
  {
    "question": "What is the purpose of `return 0;` in `main()`?",
    "options": ["End program", "Indicate success", "Nothing", "Clear memory"],
    "answer": 1,
    "explanation": "`return 0;` signals successful program execution to the OS."
  },
  {
    "question": "Which format specifier is used for a character in printf?",
    "options": ["%c", "%s", "%d", "%x"],
    "answer": 0,
    "explanation": "`%c` is used to print a single character."
  },
  {
    "question": "Which of the following is a valid variable name?",
    "options": ["1value", "_value", "value!", "int"],
    "answer": 1,
    "explanation": "Variable names can begin with an underscore and can't be keywords."
  },
  {
    "question": "Can you nest if-else statements in C?",
    "options": ["Yes", "No", "Only once", "Only inside switch"],
    "answer": 0,
    "explanation": "Yes, C supports nested if-else blocks."
  },
  {
    "question": "Which keyword is used to terminate a `switch` case?",
    "options": ["stop", "return", "break", "exit"],
    "answer": 2,
    "explanation": "`break` ends the execution of a `case` in a `switch`."
  },
  {
    "question": "Which keyword defines a constant variable in C?",
    "options": ["static", "const", "final", "define"],
    "answer": 1,
    "explanation": "`const` is used to declare constant variables in C."
  },
  {
    "question": "What is the output of `printf(\"%d\", 3 == 3);`?",
    "options": ["True", "1", "3", "0"],
    "answer": 1,
    "explanation": "`3 == 3` evaluates to 1 (true) in C."
  }
]
